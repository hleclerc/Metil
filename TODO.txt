SymbolicArray
  -> demande en principe les symboles

Prop pour les structures :
  -> création en METIL avec machine virtuelle
  -> ou struct Struct_Int {
    void write_str( String &os ) { ... }
  };

Démarrage de METIL :
  préparation du main_scope
    -> les variables sont dans la pile, et on met la table de hashage dans une position absolue
  une classe



* simplifications courantes
   a + 1 - a -> ...
* indices muets




Remarques sur l'évaluation paresseuse :
  - on peut dans un premier temps imposer la destination.
  - quand on crée l'objet, c'est fait de façon paresseuse et c'est quand c'est exécuté, qu'on a un type différent... bof
  - le type différent reste quoiqu'il en soit un LazyObject_Gpu...




A quoi sert la base de données ?
  -> dire qu'un fichier a été fait à partir de telle commande
    -> avec telles dépendances

L'idée c'est de trouver le nom du fichier dst avec CompEnv et de regarder dans la base si on est bons
  dst -> dep / cmd
  peut se faire avec des offsets dans un gros vecteur...

Question sur le stockage des opérations symboliques
  -> si on fait des Add, Mul... binaires, il faut chercher dans les enfants les simplifications potentielles
    ((5+a*b)+c)-(c-d) -> ... il faut aller fouiller à l'intérieur.
    Prop : si on trouve une simplifications, on reparcourt le graphe en évitant les pointeurs
    L'idée, A + b -> on
