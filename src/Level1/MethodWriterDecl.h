    if ( type == "DO" ) return "FP64 " + def_name + "( MO a )";
    if ( type == "YO" ) return "struct OwcpChild *" + def_name + "( MO a )";
    if ( type == "OoO" ) return "MO " + def_name + "( MO &a, MO b )";
    if ( type == "BO" ) return "bool " + def_name + "( MO a )";
    if ( type == "VOpS" ) return "void " + def_name + "( MO a, void *b, ST c )";
    if ( type == "BOO" ) return "bool " + def_name + "( MO a, MO b )";
    if ( type == "pO" ) return "void *" + def_name + "( MO a )";
    if ( type == "FO" ) return "FP32 " + def_name + "( MO a )";
    if ( type == "LO" ) return "SI64 " + def_name + "( MO a )";
    if ( type == "poO" ) return "void *" + def_name + "( MO &a, MO b )";
    if ( type == "po" ) return "void *" + def_name + "( MO &a )";
    if ( type == "EO" ) return "FP80 " + def_name + "( MO a )";
    if ( type == "VoO" ) return "void " + def_name + "( MO &a, MO b )";
    if ( type == "Vopp" ) return "void " + def_name + "( MO &a, void *b, void *c )";
    if ( type == "IO" ) return "SI32 " + def_name + "( MO a )";
    if ( type == "XOO" ) return "struct MetilException *" + def_name + "( MO a, MO b )";
    if ( type == "VoY" ) return "void " + def_name + "( MO &a, struct OwcpChild *b )";
    if ( type == "OO" ) return "MO " + def_name + "( MO a )";
    if ( type == "OOO" ) return "MO " + def_name + "( MO a, MO b )";
    if ( type == "VOO" ) return "void " + def_name + "( MO a, MO b )";
    if ( type == "VoPS" ) return "void " + def_name + "( MO &a, const void *b, ST c )";
    if ( type == "Vo" ) return "void " + def_name + "( MO &a )";
    if ( type == "SO" ) return "ST " + def_name + "( MO a )";
    if ( type == "OOS" ) return "MO " + def_name + "( MO a, ST b )";
    if ( type == "MO" ) return "const MachineId *" + def_name + "( MO a )";
